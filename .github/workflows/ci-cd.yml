name: PitCrew Labs CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Backend Testing Job
  backend-tests:
    name: Backend Tests & Coverage
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pitcrew_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('apps/app-api/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install backend dependencies
      working-directory: apps/app-api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run backend tests
      working-directory: apps/app-api
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pitcrew_test
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      run: |
        python -m pytest --cov=. --cov-report=xml --cov-report=html --junitxml=test-results.xml

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: apps/app-api/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload backend test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: apps/app-api/test-results.xml

    - name: Upload backend coverage report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-coverage-report
        path: apps/app-api/htmlcov/

  # Frontend Testing Job
  frontend-tests:
    name: Frontend Tests & Coverage
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: apps/realtime-gateway/package-lock.json

    - name: Install frontend dependencies
      working-directory: apps/realtime-gateway
      run: npm ci

    - name: Run frontend tests
      working-directory: apps/realtime-gateway
      run: |
        npm run test:ci

    - name: Upload frontend test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: apps/realtime-gateway/test-results.xml

    - name: Upload frontend coverage report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-coverage-report
        path: apps/realtime-gateway/coverage/

  # Integration Tests Job
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pitcrew_integration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: apps/realtime-gateway/package-lock.json

    - name: Install dependencies
      run: |
        cd apps/app-api && pip install -r requirements.txt
        cd apps/realtime-gateway && npm ci

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pitcrew_integration_test
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      run: |
        ./run_ci_tests.sh

    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: test-results.xml

  # Security Scanning Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Deploy Job
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: apps/realtime-gateway/package-lock.json

    - name: Install frontend dependencies
      working-directory: apps/realtime-gateway
      run: npm ci

    - name: Build frontend
      working-directory: apps/realtime-gateway
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: apps/realtime-gateway/dist/

    # Deploy to staging environment
    - name: Deploy to Staging
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here

    # Deploy to production environment
    - name: Deploy to Production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here

  # Notification Job
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()

    steps:
    - name: Notify Success
      if: needs.build-and-deploy.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        # Add your success notification logic here

    - name: Notify Failure
      if: needs.build-and-deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add your failure notification logic here